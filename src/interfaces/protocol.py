from dataclasses import dataclass
from typing import Any, Protocol, Callable
from pathlib import Path

from torch.utils.data import Dataset

# ---------------- Protocol ----------------
class TrainerProtocol(Protocol):
    def fit(self) -> None: ...

class InferencerProtocol(Protocol):
    def inference(self) -> None: ...

class ModelProtocol(Protocol):
    def forward(self, *args, **kwargs) -> Any: ...

class DataProtocol(Protocol):
    def get_collator(self) -> Callable | None: ...
    def get_train_dataset(self) -> Dataset: ...
    def get_eval_dataset(self) -> Dataset: ...
    def get_test_dataset(self) -> Dataset | None: ...

class PipelineProtocol(Protocol):
    def run(self) -> None: ...